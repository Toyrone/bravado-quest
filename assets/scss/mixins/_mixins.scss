/*
 * Adds hover and focus styling
 */
@mixin hocus {
  &:hover,
  &:focus {
    @content;
  }
}

/*
 * Generates classes for a grid of columns.
 * The result will be .col-[col]-[total-columns] E.g. .col-xs-6-12
 *
 * @param {int}		$grid-columns	Amount of columns
 */
@mixin grid-generator($grid-columns) {
  @for $i from 1 through $grid-columns {
    .col {
      &-#{$i} {
        grid-column: span $i;
        @include query('mobile') {
          // margin-bottom: 2rem;
        }
      }
      @include query('mobile') {
        &--mb {
          grid-column: span 1;
        }
      }
    }
  }
  // add media queries mixins for mobile
}

@mixin gap($gap) {
  @for $i from 1 through $gap {
    &.gap-#{$i} {
      grid-gap: #{$i}rem;
    }
  }
}

// color theme utility classes
@mixin color-modifiers($attribute) {
  @each $name, $color in $colors {
    &-#{$name} {
      #{$attribute}: $color;
    }
  }
}

// media queries mixins
@mixin query($breakpoint, $type: max) {
  // If $breakpoint is a key that exists in
  // $breakpoints, get and use the value
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint: map-get($breakpoints, $breakpoint);
  }

  @media screen and (#{$type}-width: #{$breakpoint}) {
    @content;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

// refactor flex into one mixin
@mixin flex-row {
  @include flex;
  flex-direction: row;
}

@mixin flex-col {
  @include flex;
  flex-direction: column;
}

@mixin flex {
  display: flex;
}

@mixin flex-center {
  @include flex;
  justify-content: center;
  align-items: center;
}

@mixin flex-end {
  @include flex;
  justify-content: flex-end;
}

@mixin flex-between {
  @include flex;
  justify-content: space-between;
}
